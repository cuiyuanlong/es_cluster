{
  "schemaVersion" : 5,
  "version" : 8,
  "pipelineId" : "ReadCSVfromLocalDirectorydec75e80-21d9-4bb6-8bde-55c1c8f0a6be",
  "title" : "Basic Tutorial",
  "description" : "Basic Tutorial",
  "uuid" : "3d10bbda-b6f0-4030-9dd1-287efe04bb14",
  "configuration" : [ {
    "name" : "executionMode",
    "value" : "STANDALONE"
  }, {
    "name" : "deliveryGuarantee",
    "value" : "AT_LEAST_ONCE"
  }, {
    "name" : "startEventStage",
    "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
  }, {
    "name" : "stopEventStage",
    "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget::1"
  }, {
    "name" : "shouldRetry",
    "value" : true
  }, {
    "name" : "retryAttempts",
    "value" : -1
  }, {
    "name" : "memoryLimit",
    "value" : "${jvm:maxMemoryMB() * 0.85}"
  }, {
    "name" : "memoryLimitExceeded",
    "value" : "LOG"
  }, {
    "name" : "notifyOnStates",
    "value" : [ "RUN_ERROR", "STOPPED", "FINISHED" ]
  }, {
    "name" : "emailIDs",
    "value" : [ ]
  }, {
    "name" : "constants",
    "value" : [ ]
  }, {
    "name" : "badRecordsHandling",
    "value" : "streamsets-datacollector-basic-lib::com_streamsets_pipeline_stage_destination_recordstolocalfilesystem_ToErrorLocalFSDTarget::1"
  }, {
    "name" : "errorRecordPolicy",
    "value" : "ORIGINAL_RECORD"
  }, {
    "name" : "workerCount",
    "value" : 0
  }, {
    "name" : "clusterSlaveMemory",
    "value" : 2048
  }, {
    "name" : "clusterSlaveJavaOpts",
    "value" : "-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -Dlog4j.debug"
  }, {
    "name" : "clusterLauncherEnv",
    "value" : [ ]
  }, {
    "name" : "mesosDispatcherURL",
    "value" : null
  }, {
    "name" : "hdfsS3ConfDir",
    "value" : null
  }, {
    "name" : "rateLimit",
    "value" : 0
  }, {
    "name" : "maxRunners",
    "value" : 0
  }, {
    "name" : "shouldCreateFailureSnapshot",
    "value" : true
  }, {
    "name" : "webhookConfigs",
    "value" : [ ]
  }, {
    "name" : "sparkConfigs",
    "value" : [ ]
  }, {
    "name" : "statsAggregatorStage",
    "value" : ""
  } ],
  "uiInfo" : {
    "previewConfig" : {
      "previewSource" : "CONFIGURED_SOURCE",
      "batchSize" : 10,
      "timeout" : 10000,
      "writeToDestinations" : false,
      "executeLifecycleEvents" : false,
      "showHeader" : false,
      "showFieldType" : true,
      "rememberMe" : false
    }
  },
  "stages" : [ {
    "instanceName" : "Directory_01",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_origin_spooldir_SpoolDirDSource",
    "stageVersion" : "9",
    "configuration" : [ {
      "name" : "conf.dataFormatConfig.compression",
      "value" : "NONE"
    }, {
      "name" : "conf.dataFormatConfig.filePatternInArchive",
      "value" : "*"
    }, {
      "name" : "conf.dataFormatConfig.charset",
      "value" : "UTF-8"
    }, {
      "name" : "conf.dataFormatConfig.removeCtrlChars",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.textMaxLineLen",
      "value" : 1024
    }, {
      "name" : "conf.dataFormatConfig.useCustomDelimiter",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.customDelimiter",
      "value" : "\\r\\n"
    }, {
      "name" : "conf.dataFormatConfig.includeCustomDelimiterInTheText",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.jsonContent",
      "value" : "MULTIPLE_OBJECTS"
    }, {
      "name" : "conf.dataFormatConfig.jsonMaxObjectLen",
      "value" : 4096
    }, {
      "name" : "conf.dataFormatConfig.csvFileFormat",
      "value" : "CSV"
    }, {
      "name" : "conf.dataFormatConfig.csvHeader",
      "value" : "WITH_HEADER"
    }, {
      "name" : "conf.dataFormatConfig.csvAllowExtraColumns",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.csvExtraColumnPrefix",
      "value" : "_extra_"
    }, {
      "name" : "conf.dataFormatConfig.csvMaxObjectLen",
      "value" : 1024
    }, {
      "name" : "conf.dataFormatConfig.csvCustomDelimiter",
      "value" : "|"
    }, {
      "name" : "conf.dataFormatConfig.csvCustomEscape",
      "value" : "\\"
    }, {
      "name" : "conf.dataFormatConfig.csvCustomQuote",
      "value" : "\""
    }, {
      "name" : "conf.dataFormatConfig.csvEnableComments",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.csvCommentMarker",
      "value" : "#"
    }, {
      "name" : "conf.dataFormatConfig.csvIgnoreEmptyLines",
      "value" : true
    }, {
      "name" : "conf.dataFormatConfig.csvRecordType",
      "value" : "LIST_MAP"
    }, {
      "name" : "conf.dataFormatConfig.csvSkipStartLines",
      "value" : 0
    }, {
      "name" : "conf.dataFormatConfig.parseNull",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.nullConstant",
      "value" : "\\\\N"
    }, {
      "name" : "conf.dataFormatConfig.xmlRecordElement",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.includeFieldXpathAttributes",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.xPathNamespaceContext",
      "value" : [ ]
    }, {
      "name" : "conf.dataFormatConfig.outputFieldAttributes",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.xmlMaxObjectLen",
      "value" : 4096
    }, {
      "name" : "conf.dataFormatConfig.logMode",
      "value" : "COMMON_LOG_FORMAT"
    }, {
      "name" : "conf.dataFormatConfig.logMaxObjectLen",
      "value" : 1024
    }, {
      "name" : "conf.dataFormatConfig.retainOriginalLine",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.customLogFormat",
      "value" : "%h %l %u %t \"%r\" %>s %b"
    }, {
      "name" : "conf.dataFormatConfig.regex",
      "value" : "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\d+)"
    }, {
      "name" : "conf.dataFormatConfig.fieldPathsToGroupName",
      "value" : [ {
        "fieldPath" : "/",
        "group" : 1
      } ]
    }, {
      "name" : "conf.dataFormatConfig.grokPatternDefinition",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.grokPattern",
      "value" : "%{COMMONAPACHELOG}"
    }, {
      "name" : "conf.dataFormatConfig.onParseError",
      "value" : "ERROR"
    }, {
      "name" : "conf.dataFormatConfig.maxStackTraceLines",
      "value" : 50
    }, {
      "name" : "conf.dataFormatConfig.enableLog4jCustomLogFormat",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.log4jCustomLogFormat",
      "value" : "%r [%t] %-5p %c %x - %m%n"
    }, {
      "name" : "conf.dataFormatConfig.avroSchema",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.schemaRegistryUrls",
      "value" : [ ]
    }, {
      "name" : "conf.dataFormatConfig.schemaLookupMode",
      "value" : "SUBJECT"
    }, {
      "name" : "conf.dataFormatConfig.subject",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.schemaId",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.protoDescriptorFile",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.messageType",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.isDelimited",
      "value" : true
    }, {
      "name" : "conf.dataFormatConfig.binaryMaxObjectLen",
      "value" : 1024
    }, {
      "name" : "conf.dataFormatConfig.datagramMode",
      "value" : "SYSLOG"
    }, {
      "name" : "conf.dataFormatConfig.typesDbPath",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.convertTime",
      "value" : false
    }, {
      "name" : "conf.dataFormatConfig.excludeInterval",
      "value" : true
    }, {
      "name" : "conf.dataFormatConfig.authFilePath",
      "value" : null
    }, {
      "name" : "conf.dataFormatConfig.netflowOutputValuesMode",
      "value" : "RAW_AND_INTERPRETED"
    }, {
      "name" : "conf.dataFormatConfig.maxTemplateCacheSize",
      "value" : -1
    }, {
      "name" : "conf.dataFormatConfig.templateCacheTimeoutMs",
      "value" : -1
    }, {
      "name" : "conf.dataFormatConfig.netflowOutputValuesModeDatagram",
      "value" : "RAW_AND_INTERPRETED"
    }, {
      "name" : "conf.dataFormatConfig.maxTemplateCacheSizeDatagram",
      "value" : -1
    }, {
      "name" : "conf.dataFormatConfig.templateCacheTimeoutMsDatagram",
      "value" : -1
    }, {
      "name" : "conf.dataFormatConfig.wholeFileMaxObjectLen",
      "value" : 8192
    }, {
      "name" : "conf.dataFormatConfig.rateLimit",
      "value" : "-1"
    }, {
      "name" : "conf.dataFormat",
      "value" : "DELIMITED"
    }, {
      "name" : "conf.spoolDir",
      "value" : "/home/zhanyl/sdc/tutorials/sample_data"
    }, {
      "name" : "conf.numberOfThreads",
      "value" : 1
    }, {
      "name" : "conf.pathMatcherMode",
      "value" : "GLOB"
    }, {
      "name" : "conf.filePattern",
      "value" : "nyc_taxi_data.csv"
    }, {
      "name" : "conf.useLastModified",
      "value" : "LEXICOGRAPHICAL"
    }, {
      "name" : "conf.processSubdirectories",
      "value" : false
    }, {
      "name" : "conf.allowLateDirectory",
      "value" : false
    }, {
      "name" : "conf.overrunLimit",
      "value" : 128
    }, {
      "name" : "conf.batchSize",
      "value" : 1000
    }, {
      "name" : "conf.poolingTimeoutSecs",
      "value" : 60
    }, {
      "name" : "conf.maxSpoolFiles",
      "value" : 1000
    }, {
      "name" : "conf.initialFileToProcess",
      "value" : null
    }, {
      "name" : "conf.errorArchiveDir",
      "value" : null
    }, {
      "name" : "conf.postProcessing",
      "value" : "NONE"
    }, {
      "name" : "conf.archiveDir",
      "value" : null
    }, {
      "name" : "conf.retentionTimeMins",
      "value" : 0
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    } ],
    "uiInfo" : {
      "yPos" : 50,
      "stageType" : "SOURCE",
      "rawSource" : {
        "configuration" : [ {
          "name" : "fileName"
        } ]
      },
      "description" : "",
      "label" : "Directory 1",
      "xPos" : 60
    },
    "inputLanes" : [ ],
    "outputLanes" : [ "Directory_01OutputLane15216178148960" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "StreamSelector_01",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_processor_selector_SelectorDProcessor",
    "stageVersion" : "1",
    "configuration" : [ {
      "name" : "lanePredicates",
      "value" : [ {
        "outputLane" : "StreamSelector_01OutputLane1526453600312",
        "predicate" : "${record:value('/payment_type') == 'CRD'}"
      }, {
        "outputLane" : "StreamSelector_01OutputLane1526453580916",
        "predicate" : "default"
      } ]
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Stream Selector 1",
      "xPos" : 280,
      "yPos" : 110,
      "stageType" : "PROCESSOR"
    },
    "inputLanes" : [ "Directory_01OutputLane15216178148960" ],
    "outputLanes" : [ "StreamSelector_01OutputLane1526453600312", "StreamSelector_01OutputLane1526453580916" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "JythonEvaluator_01",
    "library" : "streamsets-datacollector-jython_2_7-lib",
    "stageName" : "com_streamsets_pipeline_stage_processor_jython_JythonDProcessor",
    "stageVersion" : "2",
    "configuration" : [ {
      "name" : "processingMode",
      "value" : "BATCH"
    }, {
      "name" : "initScript",
      "value" : "#\n# Available Objects:\n#\n#  state: a dict that is preserved between invocations of this script. \n#         Useful for caching bits of data e.g. counters.\n#\n#  log.<loglevel>(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n#                               loglevel is any log4j level: e.g. info, error, warn, trace.\n#  sdcFunctions.getFieldNull(Record, 'field path'): Receive a constant defined above \n#                                  to check if the field is typed field with value null\n#  sdcFunctions.createMap(boolean listMap): Create a map for use as a field in a record.\n#                            Pass True to this function to create a list map (ordered map)\n#\n\n# state['connection'] = Connection().open()"
    }, {
      "name" : "script",
      "value" : "#\n# Available constants: \n#   They are to assign a type to a field with a value null.\n#   NULL_BOOLEAN, NULL_CHAR, NULL_BYTE, NULL_SHORT, NULL_INTEGER, NULL_LONG\n#   NULL_FLOATNULL_DOUBLE, NULL_DATE, NULL_DATETIME, NULL_TIME, NULL_DECIMAL\n#   NULL_BYTE_ARRAY, NULL_STRING, NULL_LIST, NULL_MAP\n# \n# Available Objects:\n# \n#  records: an array of records to process, depending on Jython processor\n#           processing mode it may have 1 record or all the records in the batch.\n#\n#  state: a dict that is preserved between invocations of this script. \n#         Useful for caching bits of data e.g. counters.\n#\n#  log.<loglevel>(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n#                               loglevel is any log4j level: e.g. info, error, warn, trace.\n#\n#  output.write(record): writes a record to processor output\n#\n#  error.write(record, message): sends a record to error\n#\n#  sdcFunctions.getFieldNull(Record, 'field path'): Receive a constant defined above \n#                                  to check if the field is typed field with value null\n#  sdcFunctions.createRecord(String recordId): Creates a new record.\n#                            Pass a recordId to uniquely identify the record and include enough information to track down the record source. \n#  sdcFunctions.createMap(boolean listMap): Create a map for use as a field in a record.\n#                            Pass True to this function to create a list map (ordered map)\n#\n#  sdcFunctions.createEvent(String type, int version): Creates a new event.\n#                            Create new empty event with standard headers.\n#  sdcFunctions.toEvent(Record): Send event to event stream\n#                            Only events created with sdcFunctions.createEvent are supported.\n#  sdcFunctions.isPreview(): Determine if pipeline is in preview mode.\n#\n# Available Record Header Variables:\n#\n#  record.attributes: a map of record header attributes.\n#\n#  record.<header name>: get the value of 'header name'.\n#\n# Add additional module search paths:\n#import sys\n#sys.path.append('/some/other/dir/to/search')\n\n# Sample Jython code\nfor record in records:\n  try:\n    # Change record root field value to a STRING value\n    #record.value = 'Hello '\n\n\n    # Change record root field value to a MAP value and create an entry\n    #record.value = { 'V' : 'Hello'}\n\n    # Access a MAP entry\n    #record.value['X'] = record.value['V'] + ' World'\n\n    # Modify a MAP entry\n    #record.value['V'] = 5\n\n    # Create an ARRAY entry\n    #record.value['A'] = [ 'Element 1', 'Element 2' ]\n\n    # Access an ARRAY entry\n    #record.value['B'] = record.value['A'][0]\n\n    # Modify an existing ARRAY entry\n    #record.value['A'][0] = 100\n\n    # Assign a integer type to a field and value null\n    # record.value['null_int'] = NULL_INTEGER \n\n    # Check if the field is NULL_INTEGER(Both '==' and 'is' work). If so, assign a value \n    # if sdcFunctions.getFieldNull(record, '/null_int') == NULL_INTEGER:\n    #    record.value['null_int'] = 123\n\n    # Create a new record with map field \n    # newRecord = sdcFunctions.createRecord(record.sourceId + ':newRecordId')\n    # newRecord.value = {'field1' : 'val1', 'field2' : 'val2'}\n    # output.write(newRecord)\n\n    # Applies if the source uses WHOLE_FILE as data format\n    # input_stream = record.value['fileRef'].getInputStream()\n    # try:\n    #   input_stream.read() #Process the input stream\n    # finally:  \n    #   input_stream.close()\n\n    # Modify a record header attribute entry\n    #record.attributes['name'] = record.attributes['first_name'] + ' ' + record.attributes['last_name']\n\n    # Get a record header with field names ex. get sourceId and errorCode\n    #sourceId = record.sourceId\n    #errorCode = ''\n    #if record.errorCode:\n    #   errorCode = record.errorCode\n    cc = record.value['credit_card']\n    if cc == '':\n      error.write(record, \"Payment type was CRD, but credit card was null\")\n      continue\n\n    cc_type = ''\n    if cc.startswith('4'):\n      cc_type = 'Visa'\n    elif cc.startswith(('51','52','53','54','55')):\n      cc_type = 'MasterCard'\n    elif cc.startswith(('34','37')):\n      cc_type = 'AMEX'\n    elif cc.startswith(('300','301','302','303','304','305','36','38')):\n      cc_type = 'Diners Club'\n    elif cc.startswith(('6011','65')):\n      cc_type = 'Discover'\n    elif cc.startswith(('2131','1800','35')):\n      cc_type = 'JCB'\n    else:\n      cc_type = 'Other'\n\n    record.value['credit_card_type'] = cc_type\n    # Write record to processor output\n    output.write(record)\n\n  except Exception as e:\n    # Send record to error\n    error.write(record, str(e))"
    }, {
      "name" : "destroyScript",
      "value" : "#\n# Available Objects:\n#\n#  state: a dict that is preserved between invocations of this script. \n#         Useful for caching bits of data e.g. counters.\n#\n#  log.<loglevel>(msg, obj...): use instead of print to send log messages to the log4j log instead of stdout.\n#                               loglevel is any log4j level: e.g. info, error, warn, trace.\n#  sdcFunctions.getFieldNull(Record, 'field path'): Receive a constant defined above \n#                                  to check if the field is typed field with value null\n#  sdcFunctions.createMap(boolean listMap): Create a map for use as a field in a record.\n#                            Pass True to this function to create a list map (ordered map)\n#  sdcFunctions.createEvent(String type, int version): Creates a new event.\n#                            Create new empty event with standard headers.\n#  sdcFunctions.toEvent(Record): Send event to event stream\n#                            Only events created with sdcFunctions.createEvent are supported.\n#\n\n# state['connection'].close()"
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Jython Evaluator 1",
      "xPos" : 500,
      "yPos" : 40,
      "stageType" : "PROCESSOR"
    },
    "inputLanes" : [ "StreamSelector_01OutputLane1526453600312" ],
    "outputLanes" : [ "JythonEvaluator_01OutputLane15264536747300" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "FieldMasker_01",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_processor_fieldmask_FieldMaskDProcessor",
    "stageVersion" : "1",
    "configuration" : [ {
      "name" : "fieldMaskConfigs",
      "value" : [ {
        "fields" : [ "/credit_card" ],
        "maskType" : "REGEX",
        "regex" : "(.*)([0-9]{4})",
        "groupsToShow" : "2"
      } ]
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Field Masker 1",
      "xPos" : 720,
      "yPos" : 40,
      "stageType" : "PROCESSOR"
    },
    "inputLanes" : [ "JythonEvaluator_01OutputLane15264536747300" ],
    "outputLanes" : [ "FieldMasker_01OutputLane15216179394860" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "ExpressionEvaluator_01",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
    "stageVersion" : "2",
    "configuration" : [ {
      "name" : "expressionProcessorConfigs",
      "value" : [ {
        "fieldToSet" : "/credit_card_type",
        "expression" : "n/a"
      } ]
    }, {
      "name" : "headerAttributeConfigs",
      "value" : [ { } ]
    }, {
      "name" : "fieldAttributeConfigs",
      "value" : [ {
        "fieldToSet" : "/"
      } ]
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Expression Evaluator 1",
      "xPos" : 498.40911865234375,
      "yPos" : 163.63638305664062,
      "stageType" : "PROCESSOR"
    },
    "inputLanes" : [ "StreamSelector_01OutputLane1526453580916" ],
    "outputLanes" : [ "ExpressionEvaluator_01OutputLane15264538602990" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "FieldTypeConverter_01",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_processor_fieldtypeconverter_FieldTypeConverterDProcessor",
    "stageVersion" : "2",
    "configuration" : [ {
      "name" : "convertBy",
      "value" : "BY_FIELD"
    }, {
      "name" : "fieldTypeConverterConfigs",
      "value" : [ {
        "fields" : [ "/rate_code", "/tolls_amount", "/trip_time_in_secs", "/fare_amount", "/passenger_count" ],
        "targetType" : "INTEGER",
        "treatInputFieldAsDate" : false,
        "dataLocale" : "en,US",
        "scale" : -1,
        "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
        "dateFormat" : "YYYY_MM_DD",
        "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
        "encoding" : "UTF-8"
      }, {
        "fields" : [ "/dropoff_latitude", "/dropoff_longitude", "/mta_tax", "/pickup_latitude", "/total_amount", "/trip_distance", "/surcharge", "/tip_amount", "/pickup_longitude" ],
        "targetType" : "DOUBLE",
        "treatInputFieldAsDate" : false,
        "dataLocale" : "en,US",
        "scale" : -6,
        "decimalScaleRoundingStrategy" : "ROUND_HALF_UP",
        "dateFormat" : "YYYY_MM_DD",
        "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
        "encoding" : "UTF-8"
      }, {
        "fields" : [ "/pickup_datetime", "/dropoff_datetime" ],
        "targetType" : "DATETIME",
        "treatInputFieldAsDate" : false,
        "dataLocale" : "en,US",
        "scale" : -1,
        "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
        "dateFormat" : "YYYY_MM_DD_HH_MM_SS",
        "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
        "encoding" : "UTF-8"
      }, {
        "fields" : [ "/pickup_datetime", "/dropoff_datetime" ],
        "targetType" : "STRING",
        "treatInputFieldAsDate" : true,
        "dataLocale" : "en,US",
        "scale" : -1,
        "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
        "dateFormat" : "OTHER",
        "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
        "encoding" : "UTF-8",
        "otherDateFormat" : "yyyy-MM-dd'T'HH:mm:ss.SSSX"
      } ]
    }, {
      "name" : "wholeTypeConverterConfigs",
      "value" : [ {
        "sourceType" : "INTEGER",
        "targetType" : "INTEGER",
        "treatInputFieldAsDate" : false,
        "dataLocale" : "en,US",
        "scale" : -1,
        "decimalScaleRoundingStrategy" : "ROUND_UNNECESSARY",
        "dateFormat" : "YYYY_MM_DD",
        "zonedDateTimeFormat" : "ISO_ZONED_DATE_TIME",
        "encoding" : "UTF-8"
      } ]
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Field Type Converter 1",
      "xPos" : 940,
      "yPos" : 37.41888427734375,
      "stageType" : "PROCESSOR"
    },
    "inputLanes" : [ "FieldMasker_01OutputLane15216179394860", "ExpressionEvaluator_01OutputLane15264538602990" ],
    "outputLanes" : [ "FieldTypeConverter_01OutputLane15216183480920" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "ExpressionEvaluator_02",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_processor_expression_ExpressionDProcessor",
    "stageVersion" : "2",
    "configuration" : [ {
      "name" : "expressionProcessorConfigs",
      "value" : [ {
        "fieldToSet" : "/pickup_location",
        "expression" : "${record:value('/pickup_latitude')}, ${record:value('/pickup_longitude')}"
      }, {
        "fieldToSet" : "/dropoff_location",
        "expression" : "${record:value('/dropoff_latitude')}, ${record:value('/dropoff_longitude')}"
      }, {
        "fieldToSet" : "/trip_revenue",
        "expression" : "${record:value('/total_amount') - record:value('/tip_amount')}"
      } ]
    }, {
      "name" : "headerAttributeConfigs",
      "value" : [ { } ]
    }, {
      "name" : "fieldAttributeConfigs",
      "value" : [ {
        "fieldToSet" : "/"
      } ]
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Expression Evaluator 2",
      "xPos" : 1160,
      "yPos" : 37.11851501464844,
      "stageType" : "PROCESSOR"
    },
    "inputLanes" : [ "FieldTypeConverter_01OutputLane15216183480920" ],
    "outputLanes" : [ "ExpressionEvaluator_02OutputLane15264544808810" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "RecordDeduplicator_01",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_processor_dedup_DeDupDProcessor",
    "stageVersion" : "1",
    "configuration" : [ {
      "name" : "recordCountWindow",
      "value" : 1000000
    }, {
      "name" : "timeWindowSecs",
      "value" : 0
    }, {
      "name" : "compareFields",
      "value" : "SPECIFIED_FIELDS"
    }, {
      "name" : "fieldsToCompare",
      "value" : [ "/medallion" ]
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "outputStreamLabels" : [ "Unique Records", "Duplicate Records" ],
      "yPos" : 88.70944213867188,
      "stageType" : "PROCESSOR",
      "description" : "",
      "label" : "Record Deduplicator 1",
      "xPos" : 1360
    },
    "inputLanes" : [ "ExpressionEvaluator_02OutputLane15264544808810" ],
    "outputLanes" : [ "RecordDeduplicator_01OutputLane15264573181440", "RecordDeduplicator_01OutputLane15264573181441" ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "Elasticsearch_01",
    "library" : "streamsets-datacollector-elasticsearch_5-lib",
    "stageName" : "com_streamsets_pipeline_stage_destination_elasticsearch_ElasticSearchDTarget",
    "stageVersion" : "8",
    "configuration" : [ {
      "name" : "elasticSearchConfig.timeDriver",
      "value" : "${time:now()}"
    }, {
      "name" : "elasticSearchConfig.timeZoneID",
      "value" : "UTC"
    }, {
      "name" : "elasticSearchConfig.indexTemplate",
      "value" : "taxi"
    }, {
      "name" : "elasticSearchConfig.typeTemplate",
      "value" : "doc"
    }, {
      "name" : "elasticSearchConfig.docIdTemplate",
      "value" : null
    }, {
      "name" : "elasticSearchConfig.parentIdTemplate",
      "value" : null
    }, {
      "name" : "elasticSearchConfig.routingTemplate",
      "value" : null
    }, {
      "name" : "elasticSearchConfig.charset",
      "value" : "UTF-8"
    }, {
      "name" : "elasticSearchConfig.defaultOperation",
      "value" : "INDEX"
    }, {
      "name" : "elasticSearchConfig.unsupportedAction",
      "value" : "DISCARD"
    }, {
      "name" : "elasticSearchConfig.securityConfig.securityUser",
      "value" : "elastic:zylelk"
    }, {
      "name" : "elasticSearchConfig.securityConfig.sslTrustStorePath",
      "value" : null
    }, {
      "name" : "elasticSearchConfig.securityConfig.sslTrustStorePassword",
      "value" : null
    }, {
      "name" : "elasticSearchConfig.httpUris",
      "value" : [ "75.75.75.101:9200" ]
    }, {
      "name" : "elasticSearchConfig.params",
      "value" : [ ]
    }, {
      "name" : "elasticSearchConfig.clientSniff",
      "value" : false
    }, {
      "name" : "elasticSearchConfig.useSecurity",
      "value" : true
    }, {
      "name" : "stageOnRecordError",
      "value" : "TO_ERROR"
    }, {
      "name" : "stageRequiredFields",
      "value" : [ ]
    }, {
      "name" : "stageRecordPreconditions",
      "value" : [ ]
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Elasticsearch 1",
      "xPos" : 1580,
      "yPos" : 40,
      "stageType" : "TARGET"
    },
    "inputLanes" : [ "RecordDeduplicator_01OutputLane15264573181440" ],
    "outputLanes" : [ ],
    "eventLanes" : [ ],
    "services" : [ ]
  }, {
    "instanceName" : "ToError_01",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_destination_toerror_ToErrorDTarget",
    "stageVersion" : "1",
    "configuration" : [ ],
    "uiInfo" : {
      "description" : "",
      "label" : "To Error 1",
      "xPos" : 1580,
      "yPos" : 190,
      "stageType" : "TARGET"
    },
    "inputLanes" : [ "RecordDeduplicator_01OutputLane15264573181441" ],
    "outputLanes" : [ ],
    "eventLanes" : [ ],
    "services" : [ ]
  } ],
  "errorStage" : {
    "instanceName" : "WritetoFile_ErrorStage",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_destination_recordstolocalfilesystem_ToErrorLocalFSDTarget",
    "stageVersion" : "1",
    "configuration" : [ {
      "name" : "directory",
      "value" : "/home/zhanyl/sdc/log"
    }, {
      "name" : "uniquePrefix",
      "value" : "sdc-${sdc:id()}"
    }, {
      "name" : "rotationIntervalSecs",
      "value" : "${1 * HOURS}"
    }, {
      "name" : "maxFileSizeMbs",
      "value" : 512
    } ],
    "uiInfo" : {
      "description" : "",
      "label" : "Error Records - Write to File",
      "xPos" : 730,
      "yPos" : 50,
      "stageType" : "TARGET"
    },
    "inputLanes" : [ ],
    "outputLanes" : [ ],
    "eventLanes" : [ ],
    "services" : [ ]
  },
  "info" : {
    "pipelineId" : "ReadCSVfromLocalDirectorydec75e80-21d9-4bb6-8bde-55c1c8f0a6be",
    "title" : "Basic Tutorial",
    "description" : "Basic Tutorial",
    "created" : 1521617813444,
    "lastModified" : 1540862491142,
    "creator" : "admin",
    "lastModifier" : "admin",
    "lastRev" : "0",
    "uuid" : "7a08bfcf-f383-4eae-a5ea-26ac69e640c2",
    "valid" : true,
    "metadata" : {
      "labels" : [ "Basic Tutorial" ]
    },
    "name" : "ReadCSVfromLocalDirectorydec75e80-21d9-4bb6-8bde-55c1c8f0a6be",
    "sdcVersion" : "3.1.0.0",
    "sdcId" : "8ba84595-26bf-11e8-a07f-27af852b2284"
  },
  "metadata" : {
    "labels" : [ "Basic Tutorial" ]
  },
  "statsAggregatorStage" : null,
  "startEventStages" : [ {
    "instanceName" : "Discard_StartEventStage",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
    "stageVersion" : "1",
    "configuration" : [ ],
    "uiInfo" : {
      "description" : "",
      "label" : "Start Event - Discard",
      "xPos" : 273,
      "yPos" : 50,
      "stageType" : "TARGET"
    },
    "inputLanes" : [ ],
    "outputLanes" : [ ],
    "eventLanes" : [ ],
    "services" : [ ]
  } ],
  "stopEventStages" : [ {
    "instanceName" : "Discard_StopEventStage",
    "library" : "streamsets-datacollector-basic-lib",
    "stageName" : "com_streamsets_pipeline_stage_destination_devnull_ToErrorNullDTarget",
    "stageVersion" : "1",
    "configuration" : [ ],
    "uiInfo" : {
      "description" : "",
      "label" : "Stop Event - Discard",
      "xPos" : 273,
      "yPos" : 50,
      "stageType" : "TARGET"
    },
    "inputLanes" : [ ],
    "outputLanes" : [ ],
    "eventLanes" : [ ],
    "services" : [ ]
  } ],
  "valid" : true,
  "issues" : {
    "issueCount" : 0,
    "pipelineIssues" : [ ],
    "stageIssues" : { }
  },
  "previewable" : true
}